1. Minimize the Maximum of Two Arrays

We have two arrays arr1 and arr2 which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:

arr1 contains uniqueCnt1 distinct positive integers, each of which is not divisible by divisor1.
arr2 contains uniqueCnt2 distinct positive integers, each of which is not divisible by divisor2.
No integer is present in both arr1 and arr2.
Given divisor1, divisor2, uniqueCnt1, and uniqueCnt2, return the minimum possible maximum integer that can be present in either array.

 

Example 1:

Input: divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3
Output: 4
Explanation: 
We can distribute the first 4 natural numbers into arr1 and arr2.
arr1 = [1] and arr2 = [2,3,4].
We can see that both arrays satisfy all the conditions.
Since the maximum value is 4, we return it.
Example 2:

Input: divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1
Output: 3
Explanation: 
Here arr1 = [1,2], and arr2 = [3] satisfy all conditions.
Since the maximum value is 3, we return it.
Example 3:

Input: divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2
Output: 15
Explanation: 
Here, the final possible arrays can be arr1 = [1,3,5,7,9,11,13,15], and arr2 = [2,6].
It can be shown that it is not possible to obtain a lower maximum satisfying all conditions. 
 

Constraints:

2 <= divisor1, divisor2 <= 105
1 <= uniqueCnt1, uniqueCnt2 < 109
2 <= uniqueCnt1 + uniqueCnt2 <= 109

********************************************************************SOLUTION**************************************************************
class Solution {
public:
    long lcm(long a, long b){
        return (a/__gcd(a, b)) * b;
    }

    long minimizeSet(long d1, long d2, long u1, long u2) {
        auto ok = [&](long &m){
            long d = m/lcm(d1, d2); // value that is divisible by both d1, d2
            long n1 = m/d2 - d;
            long n2 = m/d1 - d;

            long left = m - n1 - n2 - d;

            // cout << m << " " << n1 << " " << n2 << " " << left << " " << d << endl;
            // left should be enough for u1 and u2
            n1 = max(0l, u1 - n1);
            n2 = max(0l, u2 - n2);

            // cout << n1 << " " << n2 << endl;
                        
            return (n1 + n2) <= left;
        };
        
        long l = u1+u2, h = 2*(u1 + u2);
        long ans = h;

        while(l <= h){
            long m = (h - l)/2 + l;

            if(ok(m)){
                ans = m;
                h = m-1;
            } else {
                l = m+1;
            }
        }

        return ans;
    }
};
****************************************************************************************************************************************

2. High-Access Employees
You are given a 2D 0-indexed array of strings, access_times, with size n. For each i where 0 <= i <= n - 1, access_times[i][0] represents the name of an employee, and access_times[i][1] represents the access time of that employee. All entries in access_times are within the same day.

The access time is represented as four digits using a 24-hour time format, for example, "0800" or "2250".

An employee is said to be high-access if he has accessed the system three or more times within a one-hour period.

Times with exactly one hour of difference are not considered part of the same one-hour period. For example, "0815" and "0915" are not part of the same one-hour period.

Access times at the start and end of the day are not counted within the same one-hour period. For example, "0005" and "2350" are not part of the same one-hour period.

Return a list that contains the names of high-access employees with any order you want.

 

Example 1:

Input: access_times = [["a","0549"],["b","0457"],["a","0532"],["a","0621"],["b","0540"]]
Output: ["a"]
Explanation: "a" has three access times in the one-hour period of [05:32, 06:31] which are 05:32, 05:49, and 06:21.
But "b" does not have more than two access times at all.
So the answer is ["a"].
Example 2:

Input: access_times = [["d","0002"],["c","0808"],["c","0829"],["e","0215"],["d","1508"],["d","1444"],["d","1410"],["c","0809"]]
Output: ["c","d"]
Explanation: "c" has three access times in the one-hour period of [08:08, 09:07] which are 08:08, 08:09, and 08:29.
"d" has also three access times in the one-hour period of [14:10, 15:09] which are 14:10, 14:44, and 15:08.
However, "e" has just one access time, so it can not be in the answer and the final answer is ["c","d"].
Example 3:

Input: access_times = [["cd","1025"],["ab","1025"],["cd","1046"],["cd","1055"],["ab","1124"],["ab","1120"]]
Output: ["ab","cd"]
Explanation: "ab" has three access times in the one-hour period of [10:25, 11:24] which are 10:25, 11:20, and 11:24.
"cd" has also three access times in the one-hour period of [10:25, 11:24] which are 10:25, 10:46, and 10:55.
So the answer is ["ab","cd"].
 

Constraints:

1 <= access_times.length <= 100
access_times[i].length == 2
1 <= access_times[i][0].length <= 10
access_times[i][0] consists only of English small letters.
access_times[i][1].length == 4
access_times[i][1] is in 24-hour time format.
access_times[i][1] consists only of '0' to '9'.
***************************************************************************************SOLUTION********************************************************************************
class Solution {
public:
    bool isValid(vector<int>& times){
        for(int i=0;i<times.size()-2;i++){
            if(times[i+2]-times[i] < 60)
                return true;
        }
        return false;
    }
    vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {
        vector<string> ans;
        unordered_map<string,vector<int>> umap;
        for(auto x: access_times){
            string hours = x[1].substr(0,2);
            string min = x[1].substr(2,2);
            int totalMin = stoi(hours)*60 + stoi(min);
            umap[x[0]].push_back(totalMin);
        }
        // for each employee 
        for(auto p:umap){
            if(p.second.size()<3){
                continue;
            }
            sort(p.second.begin(),p.second.end());
            // need to find three elements in an hour gap
            if(isValid(p.second)){
                ans.push_back(p.first);
            }
        }
        return ans;
    }
};
************************************************************************************************************************************************************************************

3.Query Kth Smallest Trimmed Number
You are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits.

You are also given a 0-indexed 2D integer array queries where queries[i] = [ki, trimi]. For each queries[i], you need to:

Trim each number in nums to its rightmost trimi digits.
Determine the index of the kith smallest trimmed number in nums. If two trimmed numbers are equal, the number with the lower index is considered to be smaller.
Reset each number in nums to its original length.
Return an array answer of the same length as queries, where answer[i] is the answer to the ith query.

Note:

To trim to the rightmost x digits means to keep removing the leftmost digit, until only x digits remain.
Strings in nums may contain leading zeros.
 

Example 1:

Input: nums = ["102","473","251","814"], queries = [[1,1],[2,3],[4,2],[1,2]]
Output: [2,2,1,0]
Explanation:
1. After trimming to the last digit, nums = ["2","3","1","4"]. The smallest number is 1 at index 2.
2. Trimmed to the last 3 digits, nums is unchanged. The 2nd smallest number is 251 at index 2.
3. Trimmed to the last 2 digits, nums = ["02","73","51","14"]. The 4th smallest number is 73.
4. Trimmed to the last 2 digits, the smallest number is 2 at index 0.
   Note that the trimmed number "02" is evaluated as 2.
Example 2:

Input: nums = ["24","37","96","04"], queries = [[2,1],[2,2]]
Output: [3,0]
Explanation:
1. Trimmed to the last digit, nums = ["4","7","6","4"]. The 2nd smallest number is 4 at index 3.
   There are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3.
2. Trimmed to the last 2 digits, nums is unchanged. The 2nd smallest number is 24.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i].length <= 100
nums[i] consists of only digits.
All nums[i].length are equal.
1 <= queries.length <= 100
queries[i].length == 2
1 <= ki <= nums.length
1 <= trimi <= nums[i].length
 
***************************************************************************SOLUTION******************************************************************
class Solution
{
public:
    typedef pair<string, int> pi;
    vector<int> smallestTrimmedNumbers(vector<string> &nums, vector<vector<int>> &queries)
    {
        vector<int> ans;
        int n = nums.size();
        for (auto &q : queries)
        {
            vector<pi> v;
            for (int i = 0; i < n; i++)
            {
                int t = q[1];
                int n1 = nums[i].size();
                string s = nums[i].substr(n1 - t);
                v.push_back({s, i});
            }
            sort(v.begin(), v.end());
            int k = q[0];
            ans.push_back(v[k - 1].second);
        }
        return ans;
    }
};
******************************************************************************************************************************************************
4. Combination Sum III
Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

 

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.
Example 3:

Input: k = 4, n = 1
Output: []
Explanation: There are no valid combinations.
Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.
 

Constraints:

2 <= k <= 9
1 <= n <= 60

******************************************************SOLUTION**************************************************************
class Solution {
public:
    vector<vector<int>> ans;
    
    void f(vector<int>& cur, int cnum, int k, int n) {
        if(n < 0 || cur.size() > k) return;
        if(n == 0 && cur.size() == k) {
            ans.push_back(cur);
            return;
        }
        
        for(int i=cnum; i<=9; ++i) {
            cur.push_back(i);
            f(cur, i+1, k, n-i);
            cur.pop_back();
        }
    }
    
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> cur;
        f(cur, 1, k, n);
        return ans;
    }
};
**************************************************************************************************************************
5.  Random Flip Matrix
There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.

Optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.

Implement the Solution class:

Solution(int m, int n) Initializes the object with the size of the binary matrix m and n.
int[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.
void reset() Resets all the values of the matrix to be 0.
 

Example 1:

Input
["Solution", "flip", "flip", "flip", "reset", "flip"]
[[3, 1], [], [], [], [], []]
Output
[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]

Explanation
Solution solution = new Solution(3, 1);
solution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.
solution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]
solution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.
solution.reset(); // All the values are reset to 0 and can be returned.
solution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.
 

Constraints:

1 <= m, n <= 104
There will be at least one free cell for each call to flip.
At most 1000 calls will be made to flip and reset.

********************************************************SOLUTION*************************************************************
class Solution {
public:
  vector<vector<int>>table;
  int wave;
  
  Solution(int m, int n) {
    wave = 1;
    table.resize(m, vector<int>(n, 0));      
  }
    
  vector<int> flip() {
    int Y = rand() % table.size(), X = rand() % table[0].size();
   
    while(table[Y][X] == wave){
      if(++X == table[0].size()) X = 0, Y++;
      if(Y == table.size()) Y = 0;
    } 
    
    table[Y][X] = wave;
    return {Y, X};    
  }
    
  void reset() {
    wave++;   
  }
};
*******************************************************************************************************************************************************
6. Letter Combinations of a Phone Number
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

**********************************************************************SOLUTION***************************************************************

class Solution {
public:
    vector<string>result;
    void helper(string digits,int index,string current)
    {
         vector<string>v= {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};   // to generate string for that index
        if(index==digits.length()) //base case
        {
            result.push_back(current);
            return;
        }
        string s=v[digits[index]-'0'];
        for(int i=0;i<s.length();i++)
        {
			 // If some letter remaining to consider, consider that and generate the combination or go to base case and end recursion for that letter
            helper(digits,index+1,current+s[i]);
        }
    }
    vector<string> letterCombinations(string digits) {
        if(digits=="")  return {};
        helper(digits,0,"");
        return result; //return answer
    }
};
**************************************************************************************************************************************
7.Find Missing And Repeating
Given an unsorted array Arr of size N of positive integers. One number 'A' from set {1, 2,....,N} is missing and one number 'B' occurs twice in array. Find these two numbers.

Example 1:

Input:
N = 2
Arr[] = {2, 2}
Output: 2 1
Explanation: Repeating number is 2 and 
smallest positive missing number is 1.
Example 2:

Input:
N = 3
Arr[] = {1, 3, 3}
Output: 3 2
Explanation: Repeating number is 3 and 
smallest positive missing number is 2.
Your Task:
You don't need to read input or print anything. Your task is to complete the function findTwoElement() which takes the array of integers arr and n as parameters and returns an array of integers of size 2 denoting the answer ( The first index contains B and second index contains A.)

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
2 ≤ N ≤ 105
1 ≤ Arr[i] ≤ N
***********************************************************************SOLUTION************************************************************************
class Solution{
public:
    // Function to find two elements such that their sum is equal to the given number
    vector<int> findTwoElement(vector<int> arr, int n) {
        vector<int> ans(2);
        int i;
        
        // Iterate over the array to find the first element
        for (i = 0; i < n; i++) {
            // If the element is positive, make it negative
            // to mark it as visited
            if (arr[abs(arr[i]) - 1] > 0)
                arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1];
            else
                // If the element is already negative, it is a duplicate
                // Store it as the first element in the answer vector
                ans[0] = abs(arr[i]);
        }
        
        // Iterate over the array to find the second element
        for (i = 0; i < n; i++) {
            // If the element is positive, it is the missing element
            // Store it as the second element in the answer vector
            if (arr[i] > 0) ans[1] = i + 1;
        }
        
        return ans;
    }
};
********************************************************************************************************************
8.  Find Consecutive Integers from a Data
For a stream of integers, implement a data structure that checks if the last k integers parsed in the stream are equal to value.

Implement the DataStream class:

DataStream(int value, int k) Initializes the object with an empty integer stream and the two integers value and k.
boolean consec(int num) Adds num to the stream of integers. Returns true if the last k integers are equal to value, and false otherwise. If there are less than k integers, the condition does not hold true, so returns false.
 

Example 1:

Input
["DataStream", "consec", "consec", "consec", "consec"]
[[4, 3], [4], [4], [4], [3]]
Output
[null, false, false, true, false]

Explanation
DataStream dataStream = new DataStream(4, 3); //value = 4, k = 3 
dataStream.consec(4); // Only 1 integer is parsed, so returns False. 
dataStream.consec(4); // Only 2 integers are parsed.
                      // Since 2 is less than k, returns False. 
dataStream.consec(4); // The 3 integers parsed are all equal to value, so returns True. 
dataStream.consec(3); // The last k integers parsed in the stream are [4,4,3].
                      // Since 3 is not equal to value, it returns False.
 

Constraints:

1 <= value, num <= 109
1 <= k <= 105
At most 105 calls will be made to consec.

***************************************************************************SOLUTION************************************************************
class DataStream {
public:
    DataStream(int value, int k) {
        times = k;
        this -> value = value;
        counter = 0;
    }
    
    bool consec(int num) {
        if(num == value){
            counter++;
        }
        else{
            counter = 0;
        }
        if(counter >= times){
            return true;
        }
        return false;
    }

    int times;
    int value;
    int counter;
};
*******************************************************************************************************************
9. Number following a pattern
Given a pattern containing only I's and D's. I for increasing and D for decreasing. Devise an algorithm to print the minimum number following that pattern. Digits from 1-9 and digits can't repeat.

Example 1:

Input:
D
Output:
21
Explanation:
D is meant for decreasing, so we choose the minimum number among all possible numbers like 21,31,54,87,etc.
Example 2:

Input:
IIDDD
Output:
126543
Explanation:
Above example is self- explanatory,
1 < 2 < 6 > 5 > 4 > 3
  I - I - D - D - D
Your Task:

You don't need to read input or print anything. Your task is to complete the function printMinNumberForPattern() which takes the string S and returns a string containing the minimum number following the valid number.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ Length of String ≤ 8

***************************************************************************SOLUTION*******************************************************************************

class Solution{   
public:
    string printMinNumberForPattern(string S){
        
        // Initialize current_max (to make sure that 
        // we don't use repeated character 
        int curr_max = 0; 
      
        // Initialize last_entry (Keeps track for 
        // last printed digit) 
        int last_entry = 0; 
      
        int j; 
        string ans="";
        // Iterate over input array 
        for (int i=0; i<S.length(); i++) 
        { 
            // Initialize 'noOfNextD' to get count of 
            // next D's available 
            int noOfNextD = 0; 
      
            switch(S[i]) 
            { 
            case 'I': 
                // If letter is 'I' 
      
                // Calculate number of next consecutive D's 
                // available 
                j = i+1; 
                while (S[j] == 'D' && j < S.length()) 
                { 
                    noOfNextD++; 
                    j++; 
                } 
                    
                if (i==0) 
                { 
                    curr_max = noOfNextD + 2; 
      
                    // If 'I' is first letter, print incremented 
                    // sequence from 1 
                    ++last_entry;
                    ans+=('0'+last_entry);
                    ans+=('0'+curr_max);

                    // Set max digit reached 
                    last_entry = curr_max; 
                } 
                else
                { 
                    // If not first letter 
      
                    // Get next digit to print 
                    curr_max = curr_max + noOfNextD + 1; 
      
                    // Print digit for I 
                    last_entry = curr_max; 
                    ans+=('0'+last_entry);
                } 
      
                // For all next consecutive 'D' print  
                // decremented sequence 
                for (int k=0; k<noOfNextD; k++) 
                {   
                    --last_entry;
                    ans+=('0'+last_entry);
                    i++; 
                } 
                break; 
      
            // If letter is 'D' 
            case 'D': 
                if (i == 0) 
                { 
                    // If 'D' is first letter in sequence 
                    // Find number of Next D's available 
                    j = i+1; 
                    while (S[j] == 'D' && j < S.length()) 
                    { 
                        noOfNextD++; 
                        j++; 
                    } 
      
                    // Calculate first digit to print based on  
                    // number of consecutive D's 
                    curr_max = noOfNextD + 2; 
      
                    // Print twice for the first time 
                    ans+=('0'+curr_max);
                    ans+=('0'+(curr_max - 1));

      
                    // Store last entry 
                    last_entry = curr_max - 1; 
                } 
                else
                { 
                    // If current 'D' is not first letter 
      
                    // Decrement last_entry 
                    ans+=('0'+(last_entry - 1));
                    //cout << " " << last_entry - 1; 
                    last_entry--; 
                } 
                break; 
            } 
        } 
        return ans;
        
        
    }
};
***********************************************************************************************************************************************
10. K Divisible Elements Subarrays
Given an integer array nums and two integers k and p, return the number of distinct subarrays, which have at most k elements that are divisible by p.

Two arrays nums1 and nums2 are said to be distinct if:

They are of different lengths, or
There exists at least one index i where nums1[i] != nums2[i].
A subarray is defined as a non-empty contiguous sequence of elements in an array.

 

Example 1:

Input: nums = [2,3,3,2,2], k = 2, p = 2
Output: 11
Explanation:
The elements at indices 0, 3, and 4 are divisible by p = 2.
The 11 distinct subarrays which have at most k = 2 elements divisible by 2 are:
[2], [2,3], [2,3,3], [2,3,3,2], [3], [3,3], [3,3,2], [3,3,2,2], [3,2], [3,2,2], and [2,2].
Note that the subarrays [2] and [3] occur more than once in nums, but they should each be counted only once.
The subarray [2,3,3,2,2] should not be counted because it has 3 elements that are divisible by 2.
Example 2:

Input: nums = [1,2,3,4], k = 4, p = 1
Output: 10
Explanation:
All element of nums are divisible by p = 1.
Also, every subarray of nums will have at most 4 elements that are divisible by 1.
Since all subarrays are distinct, the total number of subarrays satisfying all the constraints is 10.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i], p <= 200
1 <= k <= nums.length
*********************************************************************************SOLUTION*******************************************************************
class Solution {
public:
    int countDistinct(vector<int>& nums, int k, int p) {
        int n = nums.size();
        unordered_set<string> set;
        
        vector<int> prefSum(n + 1);
        for(int i = 0; i < n; i++)
            prefSum[i + 1] = prefSum[i] + (nums[i] % p == 0);
        
        for(int i = 0; i < n; i++){
            string subAr = "";
            for(int j = i; j < n; j++){
                if(prefSum[j + 1] - prefSum[i] <= k){
                    subAr.push_back(nums[j]);
                    set.insert(subAr);
                }
                else break;
            }
        }
        
        return set.size();
    }
};
***************************************************************************************************************************************
11. Map of Highest Peak
You are given an integer matrix isWater of size m x n that represents a map of land and water cells.

If isWater[i][j] == 0, cell (i, j) is a land cell.
If isWater[i][j] == 1, cell (i, j) is a water cell.
You must assign each cell a height in a way that follows these rules:

The height of each cell must be non-negative.
If the cell is a water cell, its height must be 0.
Any two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).
Find an assignment of heights such that the maximum height in the matrix is maximized.

Return an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.

 

Example 1:



Input: isWater = [[0,1],[0,0]]
Output: [[1,0],[2,1]]
Explanation: The image shows the assigned heights of each cell.
The blue cell is the water cell, and the green cells are the land cells.
Example 2:



Input: isWater = [[0,0,1],[1,0,0],[0,0,0]]
Output: [[1,1,0],[0,1,1],[1,2,2]]
Explanation: A height of 2 is the maximum possible height of any assignment.
Any height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.
 

Constraints:

m == isWater.length
n == isWater[i].length
1 <= m, n <= 1000
isWater[i][j] is 0 or 1.
There is at least one water cell.
****************************************************************************SOLUTION*********************************************************
class Solution {
public:

    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int r = isWater.size();
        int c = isWater[0].size();
        queue <pair<int,int>> curr;
        
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                //set the land cell to -1 (not visited)
                if (isWater[i][j] == 0) {
                    isWater[i][j] = -1;
                }
                //set the water cell to zero and to queue
                else {
                    isWater[i][j] = 0;
                    curr.push({i, j});
                }
            }
        }
        
        int hill = 0;
        while (!curr.empty()) {
            int len = curr.size();
            
            for (int k = 0; k < len; k++) {
                
                //for each cell check its 4 boundary cells
                //if it is not visited, increase its hill by 1
                pair <int, int> fnt = curr.front(); curr.pop();
                int i = fnt.first, j = fnt.second;
                
                //top cell
                if (i > 0 && isWater[i - 1][j] == -1) {
                    isWater[i - 1][j] = hill + 1;
                    curr.push({i-1, j});
                }
                //bottom cell
                if ((i < r - 1) && (isWater[i + 1][j] == -1)) {
                    isWater[i + 1][j] = hill + 1;
                    curr.push({i+1, j});
                }
                //left cell
                if (j > 0 && (isWater[i][j - 1] == -1)) {
                    isWater[i][j - 1] = hill + 1;
                    curr.push({i, j-1});
                }
                //right cell
                if ((j < c - 1) && (isWater[i][j + 1] == -1)) {
                    isWater[i][j + 1] = hill + 1;
                    curr.push({i, j+1});
                }
            }
            
            //after 1 complete round increase the height of the hill
            hill += 1;
        }
        
        return isWater;
    }
};
*************************************************************************************************************************************
12. Maximum Sum BST in Binary Tree 
Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:



Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
Output: 20
Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.
Example 2:



Input: root = [4,3,null,1,2]
Output: 2
Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.
Example 3:

Input: root = [-4,-2,-5]
Output: 0
Explanation: All values are negatives. Return an empty BST.
 

Constraints:

The number of nodes in the tree is in the range [1, 4 * 104].
-4 * 104 <= Node.val <= 4 * 104
*********************************************************************************SOLUTION*********************************************************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    struct S {
        bool isBST;
        int minVal, maxVal, sum;
    };
    
    S helper(TreeNode *node, int &res) {
        if (!node) {
            return { true, INT_MAX, INT_MIN, 0 };
        }
        S l = helper(node->left, res);
        S r = helper(node->right, res);
        if (l.isBST && r.isBST && l.maxVal < node->val && r.minVal > node->val) {
            int sum = l.sum + r.sum + node->val;
            res = max(res, sum);
            return { true, min(l.minVal, node->val), max(r.maxVal, node->val), sum };
        } else {
            return { false, 0, 0, 0 };
        }
    }
public:
    int maxSumBST(TreeNode* root) {
        int res = 0;
        helper(root, res);
        return res;
    }
};
*************************************************************************************************************************
13. Number of People Aware of a Secret
On day 1, one person discovers a secret.

You are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. You are also given an integer forget, which means that each person will forget the secret forget days after discovering it. A person cannot share the secret on the same day they forgot it, or on any day afterwards.

Given an integer n, return the number of people who know the secret at the end of day n. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 6, delay = 2, forget = 4
Output: 5
Explanation:
Day 1: Suppose the first person is named A. (1 person)
Day 2: A is the only person who knows the secret. (1 person)
Day 3: A shares the secret with a new person, B. (2 people)
Day 4: A shares the secret with a new person, C. (3 people)
Day 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)
Day 6: B shares the secret with E, and C shares the secret with F. (5 people)
Example 2:

Input: n = 4, delay = 1, forget = 3
Output: 6
Explanation:
Day 1: The first person is named A. (1 person)
Day 2: A shares the secret with B. (2 people)
Day 3: A and B share the secret with 2 new people, C and D. (4 people)
Day 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)
 

Constraints:

2 <= n <= 1000
1 <= delay < forget <= n
**********************************************************************SOLUTION***************************************************************
class Solution {
public:
    int mod = 1e9 + 7;
    int peopleAwareOfSecret(int n, int delay, int forget) {
        vector<long> secretAware(n+1, 0), firstDay(n+1, 0), canShare(n+1, 0);
        secretAware[1] = 1, firstDay[1] = 1; canShare[1] = 0;
        for(int d = 2; d <= n; ++d){
            secretAware[d] = secretAware[d-1];
            canShare[d] = canShare[d-1];
            if(d > forget){
                secretAware[d] = (secretAware[d] - firstDay[d-forget] + mod)%mod;
                canShare[d] = (canShare[d] - firstDay[d-forget] + mod)%mod;
            }
            if(d > delay){
                canShare[d] = (canShare[d] + firstDay[d-delay])%mod;
            }
            secretAware[d] = (secretAware[d] + canShare[d])%mod;
            firstDay[d] = canShare[d];
        }
        return secretAware[n];
    }
};
************************************************************************************************************************************************
14. Run Length Encoding
Given a string, Your task is to  complete the function encode that returns the run length encoded string for the given string.
eg if the input string is “wwwwaaadexxxxxx”, then the function should return “w4a3d1e1x6″.
You are required to complete the function encode that takes only one argument the string which is to be encoded and returns the encoded string.

Example 1:

Input:
str = aaaabbbccc
Output: a4b3c3
Explanation: a repeated 4 times
consecutively b 3 times, c also 3
times.
Example 2:

Input:
str = abbbcdddd
Output: a1b3c1d4
Your Task:
Complete the function encode() which takes a character array as a input parameter and returns the encoded string.

Expected Time Complexity: O(N), N = length of given string.
Expected Auxiliary Space: O(1)

Constraints:
1<=length of str<=100
************************************************************************************SOLUTION************************************************************
//Function to encode a given string
string encode(string src)
{     
    //Initializing an empty string to store the encoded string
    string dest = "";

    //Iterating over each character in the source string
    for(int i = 0; i < src.size(); i++){
        //Appending the current character to the destination string
        dest += src[i];

        //Initializing and updating a counter
        int cnt = 1;
        
        //Checking if there are consecutive characters equal to the current character
        while(i+1 < src.size() and src[i] == src[i+1]){
            //Incrementing the counter
            cnt++;
            //Moving to the next character in the source string
            i++;
        }

        //Appending the count of consecutive characters to the destination string
        dest+=to_string(cnt);
    }

    //Returning the encoded string
    return dest;
}
************************************************************************************************************************************
15. Number of Ways to Reach a Position After Exactly k Steps
You are given two positive integers startPos and endPos. Initially, you are standing at position startPos on an infinite number line. With one step, you can move either one position to the left, or one position to the right.

Given a positive integer k, return the number of different ways to reach the position endPos starting from startPos, such that you perform exactly k steps. Since the answer may be very large, return it modulo 109 + 7.

Two ways are considered different if the order of the steps made is not exactly the same.

Note that the number line includes negative integers.

 

Example 1:

Input: startPos = 1, endPos = 2, k = 3
Output: 3
Explanation: We can reach position 2 from 1 in exactly 3 steps in three ways:
- 1 -> 2 -> 3 -> 2.
- 1 -> 2 -> 1 -> 2.
- 1 -> 0 -> 1 -> 2.
It can be proven that no other way is possible, so we return 3.
Example 2:

Input: startPos = 2, endPos = 5, k = 10
Output: 0
Explanation: It is impossible to reach position 5 from position 2 in exactly 10 steps.
 

Constraints:

1 <= startPos, endPos, k <= 1000
***************************************************************SOLUTION*****************************************************************
class Solution {
public:
    int dp[3005][1005];
    long long mod = 1e9+7;
    
    
    long long int solve(int start, int end, int k){
    
        if(k == 0 && start == end){
            return 1;
        }
        if(k == 0){
            return 0;
        }
        

        if(dp[start+1000][k] != -1){
            return dp[start+1000][k];
        }
        int n = solve(start-1, end, k-1)%mod; 
        int m = solve(start+1, end, k-1)%mod;
        dp[start+1000][k] = n+m;
        return (n+m)%mod;

    }
    
    int numberOfWays(int start, int end, int k) {
        memset(dp, -1, sizeof(dp));
        return solve(start, end, k);


    }
};
********************************************************************************************************************************************
